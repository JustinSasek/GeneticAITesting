Tuning mutation prob - Best is: 0.0235
Tuning selection factor - Best is: 0.238
Tuning genetic drift - Best is: 0.78
Finished tuning
Training gen 331400 - Best fitness is: -0.5325          
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.028
Tuning selection factor - Best is: 0.106
Tuning genetic drift - Best is: 0.82
Finished tuning
Training gen 339100 - Best fitness is: -0.5322          
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.01
Tuning selection factor - Best is: 0.238
Tuning genetic drift - Best is: 0.54
Finished tuning
Training gen 346800 - Best fitness is: -0.5322          
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.01
Tuning selection factor - Best is: 0.01
Tuning genetic drift - Best is: 0.54
Finished tuning
Training gen 354200 - Best fitness is: -0.5322          
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.01
Tuning selection factor - Best is: 0.238
Tuning genetic drift - Best is: 0.5
Finished tuning
Training gen 355300 - Best fitness is: -0.5322          

Trainer finished after 40:6:28 - Max Fitness = -0.5322
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-0.5321811752336933, minWeight=-27.206323767248342, maxWeight=580.8389367500403, middleWeights=
[-1.062, 4.379],    [-13.698, 2.989],    [-0.09, -3.949],    [0.479, 0.59],    [0.772, -1.547],    [-10.75, 2.147],    [-6.071, 6.093],    [-2.269, -1.395],    [1.397, -1.146],    [-2.059, -9.849]

[-4.974, 3.145, 2.991, -0.914, 3.75, -6.22, 12.631, 4.594, 0.773, -9.865, -1.876],    [-10.439, -8.231, -8.859, -1.533, 0.407, 10.301, -10.407, -1.36, 0.18, 0.2, 2.704],    [-2.138, -0.572, 5.03, 2.399, -1.184, -6.885, 2.814, 4.066, -9.108, 10.034, -16.194],    [1.629, 2.526, 13.285, -14.805, -5.052, 7.156, 17.453, 0.336, 5.911, -6.544, -8.449],    [3.101, -0.977, -1.077, 3.787, 4.985, -5.08, 3.555, 14.21, 3.507, -0.804, 5.853],    [9.397, 16.446, 1.064, 4.898, -3.9, 0.166, 11.53, 0.083, 2.432, -11.701, 2.393],    [0.743, -8.431, 5.471, 5.874, 4.646, 3.939, -6.768, 1.701, 0.827, 0.216, -0.794],    [1.47, -9.114, 6.528, 0.529, 1.773, -17.756, -5.315, -12.992, -0.796, -20.763, -4.166],    [3.657, -1.101, 10.085, -2.801, 3.755, 14.577, -9.053, 2.029, -0.276, 8.857, -0.735],    [2.129, 4.677, -10.402, -6.121, 6.792, 5.849, -2.621, 9.668, 1.862, 11.993, 0.118]

[-3.656, 4.511, 13.55, -13.471, 8.933, 0.828, 4.89, -5.633, 6.88, 7.783, 8.124],    [2.965, 10.639, -0.67, -16.153, 2.484, 2.663, -0.064, -4.648, 1.182, 3.882, -4.194],    [2.498, -5.574, -15.415, 6.236, 2.76, 0.433, 2.555, -2.569, -0.274, 3.293, 0.9],    [2.211, -9.514, 1.763, 4.642, 0.662, 2.556, 2.35, 4.426, 1.719, 3.059, -2.904],    [5.126, -6.016, 10.865, -5.013, 5.173, 2.625, -0.085, -3.272, 5.918, 2.123, -10.068],    [4.194, -3.917, -3.364, -4.335, 4.509, 2.587, 2.335, 7.216, -1.712, -3.097, -5.631],    [3.942, 6.634, -7.917, 0.128, 5.413, 6.88, 2.636, 1.713, -1.78, 0.202, 0.459],    [2.186, 6.83, 5.096, 2.971, 0.821, 3.132, 0.347, -2.916, 3.003, 1.288, -8.968],    [0.67, -1.092, -0.74, -0.803, 4.016, 1.418, 3.803, 1.59, 0.132, 2.611, 0.138],    [2.705, -5.872, -22.644, 6.36, 1.023, -0.45, 3.43, 1.613, 6.432, 4.374, 2.723]

[-0.015, 0.468, 0.257, -1.943, 0.197, -0.568, -0.109, 1.202, 0.774, -0.231, 8.913]


NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-0.5321811752336933, minWeight=-27.206323767248342, maxWeight=580.8389367500403, layers=

[1.0] 

[3.317, 0.0, 0.0, 1.069, 0.0, 0.0, 0.022, 0.0, 0.252, 0.0] 

[0.0, 0.0, 0.0, 0.0, 21.149, 39.662, 8.012, 0.96, 8.132, 1.047] 

[327.773, 162.662, 95.671, 152.738, 249.975, 200.792, 396.301, 158.358, 177.136, 92.432] 

[6.4] 


NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-0.5321811752336933, minWeight=-27.206323767248342, maxWeight=580.8389367500403, layers=

[12.0] 

[0.0, 0.0, 0.0, 6.339, 7.72, 0.0, 0.0, 0.0, 15.624, 0.0] 

[33.354, 0.0, 0.0, 0.0, 123.132, 41.338, 85.221, 0.438, 6.179, 42.837] 

[1810.559, 676.668, 797.948, 601.911, 1025.179, 855.299, 1305.873, 396.605, 1013.068, 720.527] 

[3.7] 


NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-0.5321811752336933, minWeight=-27.206323767248342, maxWeight=580.8389367500403, layers=

[3.5] 

[0.661, 0.0, 0.0, 2.267, 1.156, 0.0, 0.0, 0.0, 3.745, 0.0] 

[0.0, 0.0, 0.0, 0.0, 35.385, 24.309, 21.479, 0.0, 0.0, 2.474] 

[468.657, 156.649, 172.113, 140.711, 240.213, 259.284, 416.34, 106.869, 264.872, 112.502] 

[8.574] 


NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-0.5321811752336933, minWeight=-27.206323767248342, maxWeight=580.8389367500403, layers=

[4.0] 

[0.13, 0.0, 0.0, 2.507, 1.542, 0.0, 0.0, 0.0, 4.444, 0.0] 

[4.405, 0.0, 0.0, 0.0, 39.02, 20.684, 24.863, 0.0, 0.0, 3.8] 

[508.886, 174.015, 204.592, 155.601, 274.609, 288.569, 437.633, 111.019, 293.609, 147.178] 

[2.6] 


NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-0.5321811752336933, minWeight=-27.206323767248342, maxWeight=580.8389367500403, layers=

[5.0] 

[0.0, 0.0, 0.0, 2.986, 2.314, 0.0, 0.0, 0.0, 5.842, 0.0] 

[8.588, 0.121, 0.0, 0.0, 49.182, 22.199, 32.323, 0.0, 0.0, 8.438] 

[658.751, 234.503, 277.404, 206.019, 361.078, 358.436, 540.959, 142.649, 379.72, 213.38] 

[5.0] 


NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-0.5321811752336933, minWeight=-27.206323767248342, maxWeight=580.8389367500403, layers=

[3.0] 

[1.192, 0.0, 0.0, 2.027, 0.77, 0.0, 0.0, 0.0, 3.047, 0.0] 

[0.0, 0.0, 0.0, 0.0, 31.75, 27.933, 18.096, 0.0, 0.0, 1.148] 

[412.321, 152.344, 150.638, 135.56, 228.398, 248.476, 412.414, 112.349, 239.085, 89.743] 

[8.0] 


NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-0.5321811752336933, minWeight=-27.206323767248342, maxWeight=580.8389367500403, layers=

[7.0] 

[0.0, 0.0, 0.0, 3.944, 3.859, 0.0, 0.0, 0.0, 8.636, 0.0] 

[15.664, 0.0, 0.0, 0.0, 70.311, 27.668, 47.437, 0.0, 0.321, 18.266] 

[978.22, 358.79, 427.33, 316.917, 543.206, 502.304, 761.288, 210.646, 560.381, 349.296] 

[2.007] 


NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-0.5321811752336933, minWeight=-27.206323767248342, maxWeight=580.8389367500403, layers=

[8.0] 

[0.0, 0.0, 0.0, 4.423, 4.631, 0.0, 0.0, 0.0, 10.034, 0.0] 

[19.202, 0.0, 0.0, 0.0, 80.875, 30.402, 54.994, 0.0, 1.493, 23.18] 

[1145.182, 422.773, 501.679, 373.528, 639.888, 572.271, 870.054, 248.094, 650.779, 423.401] 

[4.004] 


NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-0.5321811752336933, minWeight=-27.206323767248342, maxWeight=580.8389367500403, layers=

[9.0] 

[0.0, 0.0, 0.0, 4.902, 5.404, 0.0, 0.0, 0.0, 11.431, 0.0] 

[22.74, 0.0, 0.0, 0.0, 91.439, 33.136, 62.55, 0.0, 2.664, 28.094] 

[1312.143, 486.756, 576.028, 430.139, 736.569, 642.237, 978.821, 285.541, 741.177, 497.506] 

[6.002] 


NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-0.5321811752336933, minWeight=-27.206323767248342, maxWeight=580.8389367500403, layers=

[10.0] 

[0.0, 0.0, 0.0, 5.381, 6.176, 0.0, 0.0, 0.0, 12.829, 0.0] 

[26.278, 0.0, 0.0, 0.0, 102.004, 35.87, 70.107, 0.0, 3.836, 33.009] 

[1479.105, 550.739, 650.376, 486.749, 833.251, 712.204, 1087.588, 322.988, 831.575, 571.611] 

[7.999] 