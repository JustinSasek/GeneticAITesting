




























































































































































































































































































































































































































































































































































































































(base) justinsasek@wireless-10-148-198-147 AITesting %  cd /Users/justinsasek/Code/Test/AITesting ; /usr/bin/env /Librar
y/Java/JavaVirtualMachines/jdk-11.0.16.jdk/Contents/Home/bin/java -cp /Users/justinsasek/Code/Test/AITesting/bin Client 

Trainer started
Tuning started
Tuning mutation strength - Best is: 0.1475          
Tuning mutation prob - Best is: 0.01
Tuning selection factor - Best is: 0.01
Tuning genetic drift - Best is: 0.5
Finished tuning
Training gen 9800 - Best fitness is: -919.2          
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.01
Tuning selection factor - Best is: 0.01
Tuning genetic drift - Best is: 0.5
Finished tuning
Training gen 19800 - Best fitness is: -919.2          
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.01
Tuning selection factor - Best is: 0.01
Tuning genetic drift - Best is: 0.5
Finished tuning
Training gen 27800 - Best fitness is: -919.2          

Trainer finished after 39:15:32 - Max Fitness = -919.2
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-919.1999999999999, minWeight=-4.151298250512818, maxWeight=7.467011514940301, middleWeights=
[2.457, 1.814],    [2.749, 1.342],    [1.152, 2.133],    [1.347, 1.733],    [1.905, 2.499],    [2.468, 3.452],    [2.305, 2.11],    [2.858, 2.684],    [1.918, 2.989],    [1.273, 2.621]

[2.425, 1.86, 1.402, 2.506, 2.42, 2.781, 1.362, 1.753, 1.497, 0.942, 2.511],    [2.587, 1.636, 2.253, 1.7, 2.134, 1.192, 2.155, 1.852, 2.997, 1.913, 1.569],    [1.714, 1.398, 1.856, 1.076, 1.773, 1.049, 1.04, 1.605, 2.79, 1.411, 2.231],    [1.868, 1.593, 2.268, 1.128, 2.175, 2.177, 1.187, 2.652, 1.823, 2.315, 1.107],    [1.142, 2.275, 2.337, 2.672, 1.491, 1.223, 2.54, 2.24, 2.792, 2.585, 1.52],    [3.05, 2.885, 1.2, 2.407, 2.473, 1.028, 1.524, 2.078, 2.562, 2.37, 1.76],    [2.151, 1.136, 2.178, 1.884, 1.794, 1.428, 1.527, 1.591, 2.117, 1.254, 1.47],    [1.191, 2.12, 1.247, 2.453, 1.644, 1.487, 1.555, 1.164, 2.443, 1.912, 1.298],    [1.94, 2.483, 1.9, 1.69, 1.313, 1.17, 1.973, 2.049, 1.517, 0.75, 1.455],    [0.96, 3.127, 2.125, 1.65, 2.53, 2.743, 2.789, 2.612, 1.192, 1.103, 0.922]

[2.569, 1.268, 2.243, 2.5, 2.393, 2.818, 1.652, 1.667, 1.117, 2.694, -0.008],    [1.92, 1.04, 2.182, 2.222, 1.329, 2.417, 1.948, 2.326, 1.548, 2.474, -0.016],    [2.367, 2.868, 2.693, 1.752, 1.426, 1.487, 1.934, 2.246, 2.01, 1.756, 0.013],    [2.093, 2.688, 2.279, 3.101, 2.264, 1.459, 0.972, 1.007, 2.656, 1.176, 0.523],    [2.449, 2.473, 1.906, 1.347, 2.199, 2.684, 1.903, 1.982, 1.718, 2.381, 0.094],    [2.837, 1.213, 1.866, 2.761, 1.208, 2.127, 1.65, 1.679, 2.927, 1.861, -0.071],    [3.286, 2.29, 2.713, 2.469, 1.755, 1.664, 1.576, 1.756, 1.653, 2.177, -0.057],    [1.993, 2.563, 2.607, 2.837, 2.079, 0.961, 1.372, 1.746, 1.47, 1.554, 1.251],    [2.443, 1.188, 2.596, 1.671, 1.771, 3.008, 1.275, 2.136, 2.887, 1.87, 1.795],    [2.394, 3.016, 1.23, 1.668, 2.822, 2.228, 2.6, 1.767, 1.812, 1.207, 0.031]

outputWeights =
[2.525, 1.487, 2.468, 1.168, 1.258, 2.486, 1.802, 1.131, 1.063, 1.031, 1.841],    
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-919.1999999999999, minWeight=-4.151298250512818, maxWeight=7.467011514940301, layers=

[1.0] 

[3.042, 2.716, 2.708, 2.407, 3.452, 4.686, 3.262, 4.113, 3.948, 3.257] 

[34.649, 35.653, 28.866, 34.154, 36.64, 37.193, 29.926, 29.818, 29.043, 36.355] 

[353.172, 321.802, 338.239, 328.659, 353.562, 332.547, 355.43, 319.656, 346.518, 348.144] 

[5591.833]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-919.1999999999999, minWeight=-4.151298250512818, maxWeight=7.467011514940301, layers=

[12.0] 

[16.557, 17.837, 9.043, 9.818, 13.927, 18.26, 15.94, 19.829, 14.497, 10.258] 

[143.977, 148.917, 116.149, 142.434, 152.452, 160.066, 123.747, 124.217, 127.265, 159.546] 

[1487.303, 1356.222, 1419.954, 1379.373, 1489.647, 1402.965, 1492.694, 1335.226, 1456.031, 1462.803] 

[23508.323]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-919.1999999999999, minWeight=-4.151298250512818, maxWeight=7.467011514940301, layers=

[3.5] 

[6.114, 6.153, 4.148, 4.091, 5.832, 7.771, 6.144, 7.685, 6.346, 4.848] 

[59.496, 61.395, 48.703, 58.763, 62.961, 65.119, 51.249, 51.272, 51.366, 64.353] 

[610.929, 556.897, 584.083, 567.458, 611.763, 575.824, 613.899, 550.467, 598.68, 601.475] 

[9663.762]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-919.1999999999999, minWeight=-4.151298250512818, maxWeight=7.467011514940301, layers=

[4.0] 

[6.728, 6.84, 4.436, 4.428, 6.308, 8.388, 6.72, 8.399, 6.825, 5.167] 

[64.466, 66.543, 52.671, 63.685, 68.225, 70.704, 55.513, 55.563, 55.831, 69.953] 

[662.481, 603.916, 633.252, 615.217, 663.403, 624.479, 665.593, 596.629, 649.113, 652.142] 

[10478.148]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-919.1999999999999, minWeight=-4.151298250512818, maxWeight=7.467011514940301, layers=

[5.0] 

[7.957, 8.215, 5.012, 5.102, 7.261, 9.622, 7.872, 9.828, 7.784, 5.803] 

[74.405, 76.84, 60.605, 73.529, 78.753, 81.874, 64.043, 64.145, 64.76, 81.152] 

[765.583, 697.955, 731.59, 710.737, 766.684, 721.79, 768.981, 688.954, 749.978, 753.474] 

[12106.92]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-919.1999999999999, minWeight=-4.151298250512818, maxWeight=7.467011514940301, layers=

[3.0] 

[5.499, 5.465, 3.86, 3.754, 5.356, 7.154, 5.567, 6.97, 5.866, 4.53] 

[54.527, 56.246, 44.736, 53.842, 57.696, 59.534, 46.984, 46.981, 46.902, 58.754] 

[559.378, 509.878, 534.915, 519.698, 560.123, 527.168, 562.205, 504.305, 548.248, 550.809] 

[8849.376]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-919.1999999999999, minWeight=-4.151298250512818, maxWeight=7.467011514940301, layers=

[7.0] 

[10.414, 10.964, 6.164, 6.449, 9.165, 12.09, 10.177, 12.686, 9.702, 7.076] 

[94.282, 97.433, 76.475, 93.216, 99.81, 104.215, 81.101, 81.308, 82.619, 103.55] 

[971.789, 886.031, 928.265, 901.776, 973.245, 916.411, 975.756, 873.603, 951.707, 956.14] 

[15364.464]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-919.1999999999999, minWeight=-4.151298250512818, maxWeight=7.467011514940301, layers=

[8.0] 

[11.642, 12.338, 6.74, 7.123, 10.118, 13.324, 11.33, 14.114, 10.661, 7.712] 

[104.221, 107.73, 84.41, 103.06, 110.338, 115.385, 89.63, 89.89, 91.548, 114.749] 

[1074.892, 980.069, 1026.603, 997.295, 1076.525, 1013.722, 1079.144, 965.927, 1052.572, 1057.472] 

[16993.236]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-919.1999999999999, minWeight=-4.151298250512818, maxWeight=7.467011514940301, layers=

[9.0] 

[12.871, 13.713, 7.316, 7.797, 11.07, 14.558, 12.482, 15.543, 11.62, 8.349] 

[114.16, 118.027, 92.344, 112.903, 120.867, 126.555, 98.159, 98.472, 100.477, 125.948] 

[1177.995, 1074.107, 1124.941, 1092.815, 1179.806, 1111.033, 1182.531, 1058.252, 1153.437, 1158.805] 

[18622.008]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-919.1999999999999, minWeight=-4.151298250512818, maxWeight=7.467011514940301, layers=

[10.0] 

[14.1, 15.088, 7.892, 8.471, 12.022, 15.792, 13.635, 16.972, 12.579, 8.985] 

[124.099, 128.324, 100.279, 122.747, 131.395, 137.725, 106.689, 107.053, 109.407, 137.148] 

[1281.098, 1168.145, 1223.278, 1188.334, 1283.086, 1208.344, 1285.919, 1150.576, 1254.302, 1260.137] 

[20250.779]
(base) justinsasek@wireless-10-148-198-147 AITesting % 
(base) justinsasek@wireless-10-148-198-147 AITesting %  cd /Users/justinsasek/Code/Test/AITesting ; /usr/bin/env /Librar
y/Java/JavaVirtualMachines/jdk-11.0.16.jdk/Contents/Home/bin/java -cp /Users/justinsasek/Code/Test/AITesting/bin Client 

Trainer started
Tuning started
Tuning mutation strength - Best is: 1.5125          
Tuning mutation prob - Best is: 0.0505
Tuning selection factor - Best is: 0.19
Tuning genetic drift - Best is: 0.86
Finished tuning
Training gen 9000 - Best fitness is: -12.8067          
Tuning started
Tuning mutation strength - Best is: 1.9025          
Tuning mutation prob - Best is: 0.028
Tuning selection factor - Best is: 0.118
Tuning genetic drift - Best is: 0.5
Finished tuning
Training gen 17400 - Best fitness is: -12.5138          
Tuning started
Tuning mutation strength - Best is: 2.0          
Tuning mutation prob - Best is: 0.0145
Tuning selection factor - Best is: 0.238
Tuning genetic drift - Best is: 0.88
Finished tuning
Training gen 26400 - Best fitness is: -12.2909          
Tuning started
Tuning mutation strength - Best is: 0.245          
Tuning mutation prob - Best is: 0.0955
Tuning selection factor - Best is: 0.226
Tuning genetic drift - Best is: 0.7
Finished tuning
Training gen 35200 - Best fitness is: -6.0537          
Tuning started
Tuning mutation strength - Best is: 0.9275          
Tuning mutation prob - Best is: 0.019
Tuning selection factor - Best is: 0.154
Tuning genetic drift - Best is: 0.58
Finished tuning
Training gen 43700 - Best fitness is: -5.911          
Tuning started
Tuning mutation strength - Best is: 0.5375          
Tuning mutation prob - Best is: 0.028
Tuning selection factor - Best is: 0.13
Tuning genetic drift - Best is: 0.5
Finished tuning
Training gen 51900 - Best fitness is: -5.8804          
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.028
Tuning selection factor - Best is: 0.01
Tuning genetic drift - Best is: 0.5
Finished tuning
Training gen 60100 - Best fitness is: -5.8753          
Tuning started
Tuning mutation strength - Best is: 0.1475          
Tuning mutation prob - Best is: 0.037
Tuning selection factor - Best is: 0.154
Tuning genetic drift - Best is: 0.52
Finished tuning
Training gen 68400 - Best fitness is: -5.8731          
Tuning started
Tuning mutation strength - Best is: 0.245          
Tuning mutation prob - Best is: 0.01
Tuning selection factor - Best is: 0.082
Tuning genetic drift - Best is: 0.5
Finished tuning
Training gen 76600 - Best fitness is: -5.8731          
Tuning started
Tuning mutation strength - Best is: 0.245          
Tuning mutation prob - Best is: 0.01
Tuning selection factor - Best is: 0.01
Tuning genetic drift - Best is: 0.5
Finished tuning
Training gen 84800 - Best fitness is: -5.8784          
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.037
Tuning selection factor - Best is: 0.01
Tuning genetic drift - Best is: 0.5
Finished tuning
Training gen 92900 - Best fitness is: -5.8653          
Tuning started
Tuning mutation strength - Best is: 0.05          

Tuning mutation prob - Best is: 0.01
Tuning selection factor - Best is: 0.12
Tuning genetic drift - Best is: 0.2
Finished tuning

Trainer finished after 39:23:32 - Max Fitness = -5.8653
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-5.865285846641523, minWeight=-12.467326440786513, maxWeight=23.84369311233738, middleWeights=
[1.327, -0.279],    [2.138, -2.506],    [1.617, -1.143],    [1.76, -2.938],    [1.342, -3.285],    [1.135, -2.028],    [1.06, 0.153],    [2.565, -0.534],    [1.2, -0.473],    [2.798, 0.084]

[0.587, -0.428, 1.175, 0.843, 2.066, 1.168, 1.507, 1.017, 1.13, 2.42, 0.45],    [0.114, -4.311, 2.043, -3.37, 4.233, -3.318, 3.343, -1.203, -1.443, -0.807, -4.963],    [1.733, -0.902, 1.135, 2.162, 1.42, 2.81, 2.254, 0.528, 1.636, -0.784, 2.083],    [3.864, 1.59, -2.823, 0.25, -0.443, 3.986, 0.023, 1.407, 1.344, -4.562, 2.55],    [1.872, -0.417, 1.262, -0.08, 1.961, 2.866, 1.578, 2.76, 2.064, 0.04, 2.794],    [0.623, -0.065, 2.164, 2.047, 0.955, 1.804, -0.088, 0.802, -0.919, 0.247, 3.857],    [4.847, 0.67, -2.266, 3.072, 4.808, 4.4, -0.197, -2.394, -1.331, -6.385, 6.348],    [0.595, -0.776, 2.261, 0.422, 1.338, 2.963, 1.032, -1.425, -0.464, -1.551, 2.909],    [-0.189, 1.135, 0.399, 1.405, -0.334, 3.708, 0.286, -1.479, -0.415, -0.427, 1.882],    [0.057, -0.317, -0.009, -0.55, 2.193, 3.084, 1.021, -0.627, 1.881, 0.093, 2.125]

[-0.973, 6.92, -4.252, -0.346, -1.268, -5.074, 1.936, 0.223, 1.448, -2.67, -4.52],    [0.476, 3.06, -0.144, -0.912, -3.233, -0.303, 7.531, -2.362, -0.551, 2.151, 5.032],    [0.368, -0.819, -5.275, -0.505, 0.785, -0.049, 4.917, 2.563, -1.356, -6.27, -3.142],    [-3.115, 1.126, -1.59, 2.418, 1.203, 2.241, 0.056, 1.69, -1.221, 2.611, -6.732],    [0.078, 7.238, -3.807, 1.759, -5.522, 0.447, 1.804, 1.816, 2.963, -4.178, 6.242],    [-0.966, 19.784, -0.662, -4.038, 1.267, 0.083, 2.391, 1.879, -0.292, 0.22, 0.661],    [-0.191, 2.597, -0.111, 2.74, -2.439, 0.671, 5.153, -4.797, 2.744, 1.136, 3.846],    [1.261, 4.818, -4.473, -3.101, -0.415, 1.75, 6.743, 1.393, 0.901, 0.749, -3.533],    [-0.258, 2.928, -0.69, 2.064, -5.284, 2.575, 2.521, 5.675, -3.125, -0.409, -7.607],    [-0.266, -0.156, 4.613, -0.426, -2.133, -1.965, 2.137, -0.849, -0.147, 1.091, 3.275]

outputWeights =
[1.046, 2.672, 1.763, 1.981, 1.327, 1.493, 1.291, 2.496, 1.795, 1.073, 2.165],    
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-5.865285846641523, minWeight=-12.467326440786513, maxWeight=23.84369311233738, layers=

[1.0] 

[1.048, 0.0, 0.474, 0.0, 0.0, 0.0, 1.214, 2.031, 0.727, 2.882] 

[13.312, 0.0, 7.177, 0.0, 14.493, 7.101, 0.0, 0.0, 0.0, 3.783] 

[0.0, 0.0, 0.0, 0.0, 0.0, 2.837, 0.0, 0.0, 0.0, 0.0] 

[6.4]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-5.865285846641523, minWeight=-12.467326440786513, maxWeight=23.84369311233738, layers=

[12.0] 

[15.641, 23.154, 18.258, 18.188, 12.817, 11.589, 12.879, 30.251, 13.929, 33.664] 

[223.885, 0.0, 160.529, 1.357, 236.271, 140.644, 0.0, 6.197, 35.547, 72.865] 

[0.0, 0.0, 0.0, 0.0, 0.0, 1.028, 0.0, 0.0, 0.0, 0.0] 

[3.7]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-5.865285846641523, minWeight=-12.467326440786513, maxWeight=23.84369311233738, layers=

[3.5] 

[4.365, 4.978, 4.515, 3.224, 1.412, 1.944, 3.865, 8.445, 3.728, 9.878] 

[56.618, 0.0, 36.249, 0.0, 60.167, 32.93, 0.0, 0.0, 2.631, 14.653] 

[0.0, 0.0, 0.0, 0.0, 0.0, 3.406, 0.0, 0.0, 0.0, 0.0] 

[7.25]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-5.865285846641523, minWeight=-12.467326440786513, maxWeight=23.84369311233738, layers=

[4.0] 

[5.028, 6.047, 5.324, 4.104, 2.082, 2.511, 4.395, 9.727, 4.328, 11.277] 

[66.457, 0.0, 43.559, 0.0, 70.526, 39.266, 0.0, 0.0, 4.567, 18.077] 

[0.0, 0.0, 0.0, 0.0, 0.0, 2.903, 0.0, 0.0, 0.0, 0.0] 

[6.5]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-5.865285846641523, minWeight=-12.467326440786513, maxWeight=23.84369311233738, layers=

[5.0] 

[6.355, 8.186, 6.94, 5.865, 3.424, 3.646, 5.456, 12.293, 5.528, 14.076] 

[86.136, 0.0, 58.18, 0.0, 91.244, 51.938, 0.0, 0.0, 8.44, 24.926] 

[0.0, 0.0, 0.0, 0.0, 0.0, 1.898, 0.0, 0.0, 0.0, 0.0] 

[4.999]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-5.865285846641523, minWeight=-12.467326440786513, maxWeight=23.84369311233738, layers=

[3.0] 

[3.701, 3.909, 3.707, 2.344, 0.741, 1.376, 3.335, 7.162, 3.128, 8.479] 

[46.779, 0.0, 28.938, 0.0, 49.808, 26.593, 0.0, 0.0, 0.695, 11.229] 

[0.0, 0.0, 0.0, 0.0, 0.0, 3.908, 0.0, 0.0, 0.0, 0.0] 

[8.0]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-5.865285846641523, minWeight=-12.467326440786513, maxWeight=23.84369311233738, layers=

[7.0] 

[9.008, 12.463, 10.174, 9.386, 6.108, 5.915, 7.577, 17.424, 7.928, 19.672] 

[125.493, 0.0, 87.423, 0.0, 132.681, 77.282, 0.0, 0.06, 16.185, 38.623] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.002, 0.0, 0.0, 0.0, 0.0] 

[2.168]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-5.865285846641523, minWeight=-12.467326440786513, maxWeight=23.84369311233738, layers=

[8.0] 

[10.335, 14.601, 11.791, 11.146, 7.449, 7.05, 8.637, 19.989, 9.129, 22.471] 

[145.171, 0.0, 102.044, 0.0, 153.399, 89.955, 0.0, 1.288, 20.057, 45.471] 

[0.0, 0.0, 0.0, 0.0, 0.0, 1.303, 0.0, 0.0, 0.0, 0.0] 

[4.111]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-5.865285846641523, minWeight=-12.467326440786513, maxWeight=23.84369311233738, layers=

[9.0] 

[11.661, 16.739, 13.407, 12.907, 8.791, 8.185, 9.698, 22.555, 10.329, 25.269] 

[164.85, 0.0, 116.665, 0.0, 174.117, 102.627, 0.0, 2.515, 23.93, 52.32] 

[0.0, 0.0, 0.0, 0.0, 0.0, 2.604, 0.0, 0.0, 0.0, 0.0] 

[6.053]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-5.865285846641523, minWeight=-12.467326440786513, maxWeight=23.84369311233738, layers=

[10.0] 

[12.988, 18.878, 15.024, 14.667, 10.133, 9.32, 10.758, 25.12, 11.529, 28.067] 

[184.528, 0.0, 131.286, 0.0, 194.835, 115.299, 0.0, 3.742, 27.802, 59.168] 

[0.0, 0.0, 0.0, 0.0, 0.0, 3.906, 0.0, 0.0, 0.0, 0.0] 

[7.996]
(base) justinsasek@wireless-10-148-198-147 AITesting % 
(base) justinsasek@wireless-10-148-198-147 AITesting % 