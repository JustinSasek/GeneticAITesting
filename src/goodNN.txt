[0.577, 0.091, 0.225, 0.0, 0.187, 0.632, 0.159, 0.204, 0.116, 0.669] 

[6.4]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.42547890266976, minWeight=-3.147367900352761, maxWeight=4.238699544251585, layers=

[12.0] 

[0.0, 0.0, 0.081, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.498, 0.0, 0.149, 0.0, 0.0, 0.399, 0.0, 0.0, 0.0, 0.572] 

[4.296]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.42547890266976, minWeight=-3.147367900352761, maxWeight=4.238699544251585, layers=

[3.5] 

[0.0, 0.0, 1.958, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.083, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.559, 0.043, 0.208, 0.0, 0.096, 0.579, 0.089, 0.114, 0.05, 0.647] 

[5.525]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.42547890266976, minWeight=-3.147367900352761, maxWeight=4.238699544251585, layers=

[4.0] 

[0.0, 0.0, 1.847, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.556, 0.033, 0.205, 0.0, 0.078, 0.568, 0.075, 0.095, 0.037, 0.642] 

[5.35]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.42547890266976, minWeight=-3.147367900352761, maxWeight=4.238699544251585, layers=

[5.0] 

[0.0, 0.0, 1.627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.069, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.548, 0.014, 0.198, 0.0, 0.042, 0.547, 0.047, 0.059, 0.011, 0.633] 

[5.0]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.42547890266976, minWeight=-3.147367900352761, maxWeight=4.238699544251585, layers=

[3.0] 

[0.0, 0.0, 2.068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.088, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.563, 0.052, 0.211, 0.0, 0.114, 0.589, 0.103, 0.132, 0.064, 0.651] 

[5.7]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.42547890266976, minWeight=-3.147367900352761, maxWeight=4.238699544251585, layers=

[7.0] 

[0.0, 0.0, 1.185, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.049, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.534, 0.0, 0.184, 0.0, 0.0, 0.505, 0.0, 0.0, 0.0, 0.616] 

[4.551]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.42547890266976, minWeight=-3.147367900352761, maxWeight=4.238699544251585, layers=

[8.0] 

[0.0, 0.0, 0.964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.039, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.527, 0.0, 0.177, 0.0, 0.0, 0.484, 0.0, 0.0, 0.0, 0.607] 

[4.5]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.42547890266976, minWeight=-3.147367900352761, maxWeight=4.238699544251585, layers=

[9.0] 

[0.0, 0.0, 0.743, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.029, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.519, 0.0, 0.17, 0.0, 0.0, 0.462, 0.0, 0.0, 0.0, 0.598] 

[4.449]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.42547890266976, minWeight=-3.147367900352761, maxWeight=4.238699544251585, layers=

[10.0] 

[0.0, 0.0, 0.523, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.02, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.512, 0.0, 0.163, 0.0, 0.0, 0.441, 0.0, 0.0, 0.0, 0.589] 

[4.398]
(base) justinsasek@wireless-10-145-66-6 AITesting % 
(base) justinsasek@wireless-10-145-66-6 AITesting %  cd /Users/justinsasek/Code/Test/AITesting ; /usr/bin/env /Library/Java/JavaVirtualMachines/
jdk-11.0.16.jdk/Contents/Home/bin/java -cp /Users/justinsasek/Code/Test/AITesting/bin Client 
Trainer started
Tuning started
Tuning mutation strength - Best is: 0.09750000000000004           
Tuning mutation prob - Best is: 0.09510000000000002           
Tuning selection factor - Best is: 0.23800000000000007           
Tuning genetic drift - Best is: 0.8800000000000003          
Finished tuning
Training gen 1288 - Best fitness is: -16.425176594458566          
Training gen 1289 - Best fitness is: -16.425176594458566          
Trainer finished - Max Fitness = -16.425176594458566
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.425176594458566, minWeight=-2.37548709094604, maxWeight=3.911563836886597, middleWeights=
[-0.053, 1.765],    [-1.074, 0.869],    [-0.902, 0.654],    [-0.815, 0.647],    [-2.158, 1.173],    [-1.758, 1.354],    [-1.609, 0.554],    [-2.118, 0.997],    [-1.145, 0.467],    [-1.627, 1.32]

[0.114, 1.926, 1.677, 1.563, 1.589, 2.064, 1.716, 2.389, 2.855, 1.841, -0.336],    [0.537, 2.959, 1.305, 2.255, 0.395, 2.248, 0.475, 2.558, 3.38, 2.3, -2.034],    [0.23, 2.341, 1.481, 0.295, 1.872, 1.985, 0.859, 0.861, 1.171, 2.61, -1.001],    [0.038, 2.515, 2.829, 0.638, 1.617, 1.701, 1.223, 2.965, 2.621, 2.217, -0.698],    [0.269, 2.368, 2.806, 0.175, 1.558, 1.224, 1.496, 3.159, 1.111, 1.118, -0.383],    [0.495, 1.838, 3.415, 0.285, 2.611, 1.938, 2.407, 2.604, 1.807, 2.66, -1.453],    [0.008, 2.482, 2.307, 2.039, 1.38, 3.038, 2.215, 1.697, 0.723, 2.269, -0.001],    [-0.045, 1.401, 1.207, 3.305, 1.735, 1.492, 2.194, 2.724, 1.663, 3.056, -1.069],    [0.909, 1.146, 2.22, 1.929, 0.462, 2.925, 3.057, 0.904, 2.723, 2.896, -1.657],    [-0.29, 2.668, 1.506, 2.827, 2.486, 3.076, 1.932, 0.282, 2.094, 2.312, 0.029]

[2.161, 2.177, 3.404, 2.997, 1.237, 1.791, 1.387, -0.02, 1.663, 1.583, -0.025],    [1.288, 1.929, 2.011, 1.779, 0.962, 1.56, 1.449, 1.592, 1.307, 0.322, 0.752],    [1.3, 0.129, 0.89, 3.209, 0.674, 1.184, 0.712, 2.294, 2.722, 2.343, -0.001],    [1.205, 1.156, 2.284, 2.184, 0.937, 1.695, 2.544, 1.528, 1.877, 1.604, -0.013],    [2.575, 0.461, 1.332, 1.662, 1.504, 0.857, 1.288, 2.146, 1.257, 1.072, -0.002],    [1.112, 1.26, 2.905, 2.611, 1.277, 1.696, 1.468, 1.357, 2.064, 2.589, -0.019],    [3.268, 2.343, 3.236, 1.826, 2.557, 1.57, 1.188, 2.553, 1.746, 2.181, 0.906],    [1.117, 2.763, 1.744, 2.037, 2.867, 1.505, 0.72, 2.879, 1.183, 1.863, -0.003],    [2.097, 1.934, 2.097, 0.881, 1.516, 2.518, 0.36, 1.678, 2.049, 3.323, 0.006],    [0.785, 0.705, 2.139, 2.208, 2.024, 1.139, 1.501, 1.874, 1.094, 1.266, -0.016]

outputWeights =
[2.097, 1.081, 1.969, 1.176, 1.089, 1.602, 1.28, 1.937, 1.269, 1.803, 2.439],    
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.425176594458566, minWeight=-2.37548709094604, maxWeight=3.911563836886597, layers=

[1.0] 

[1.713, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.0, 0.0, 0.0, 0.078, 0.0, 0.013, 0.0, 0.0, 0.0] 

[0.089, 0.845, 0.06, 0.093, 0.132, 0.099, 1.12, 0.229, 0.128, 0.161] 

[6.4]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.425176594458566, minWeight=-2.37548709094604, maxWeight=3.911563836886597, layers=

[12.0] 

[1.133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.008, 0.0, 0.0, 0.0] 

[0.0, 0.764, 0.004, 0.008, 0.009, 0.0, 0.916, 0.003, 0.009, 0.0] 

[4.481]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.425176594458566, minWeight=-2.37548709094604, maxWeight=3.911563836886597, layers=

[3.5] 

[1.581, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.0, 0.0, 0.0, 0.042, 0.0, 0.012, 0.0, 0.0, 0.0] 

[0.044, 0.81, 0.036, 0.057, 0.077, 0.052, 1.029, 0.127, 0.074, 0.088] 

[5.525]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.425176594458566, minWeight=-2.37548709094604, maxWeight=3.911563836886597, layers=

[4.0] 

[1.555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.0, 0.0, 0.0, 0.035, 0.0, 0.012, 0.0, 0.0, 0.0] 

[0.035, 0.803, 0.031, 0.05, 0.066, 0.043, 1.01, 0.107, 0.063, 0.073] 

[5.35]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.425176594458566, minWeight=-2.37548709094604, maxWeight=3.911563836886597, layers=

[5.0] 

[1.502, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.0, 0.0, 0.0, 0.021, 0.0, 0.011, 0.0, 0.0, 0.0] 

[0.016, 0.788, 0.021, 0.035, 0.044, 0.024, 0.973, 0.066, 0.042, 0.044] 

[5.0]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.425176594458566, minWeight=-2.37548709094604, maxWeight=3.911563836886597, layers=

[3.0] 

[1.607, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.0, 0.0, 0.0, 0.049, 0.0, 0.012, 0.0, 0.0, 0.0] 

[0.053, 0.817, 0.04, 0.064, 0.088, 0.062, 1.047, 0.148, 0.085, 0.102] 

[5.7]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.425176594458566, minWeight=-2.37548709094604, maxWeight=3.911563836886597, layers=

[7.0] 

[1.397, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01, 0.0, 0.0, 0.0] 

[0.0, 0.767, 0.006, 0.013, 0.011, 0.0, 0.919, 0.005, 0.01, 0.0] 

[4.505]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.425176594458566, minWeight=-2.37548709094604, maxWeight=3.911563836886597, layers=

[8.0] 

[1.344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01, 0.0, 0.0, 0.0] 

[0.0, 0.766, 0.006, 0.012, 0.011, 0.0, 0.918, 0.004, 0.009, 0.0] 

[4.5]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.425176594458566, minWeight=-2.37548709094604, maxWeight=3.911563836886597, layers=

[9.0] 

[1.291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009, 0.0, 0.0, 0.0] 

[0.0, 0.766, 0.005, 0.011, 0.01, 0.0, 0.918, 0.004, 0.009, 0.0] 

[4.495]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.425176594458566, minWeight=-2.37548709094604, maxWeight=3.911563836886597, layers=

[10.0] 

[1.239, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009, 0.0, 0.0, 0.0] 

[0.0, 0.765, 0.005, 0.01, 0.01, 0.0, 0.917, 0.004, 0.009, 0.0] 

[4.491]
(base) justinsasek@wireless-10-145-66-6 AITesting % 
(base) justinsasek@wireless-10-145-66-6 AITesting %  cd /Users/justinsasek/Code/Test/AITesting ; /usr/bin/env /Library/Java/JavaVirtualMachines/
jdk-11.0.16.jdk/Contents/Home/bin/java -cp /Users/justinsasek/Code/Test/AITesting/bin Client 
Trainer started
Tuning started
Tuning mutation strength - Best is: 0.09750000000000004           
Tuning mutation prob - Best is: 0.09510000000000002           
Tuning selection factor - Best is: 0.23800000000000007           
Tuning genetic drift - Best is: 0.8800000000000003          
Finished tuning
Training gen 5520 - Best fitness is: -817.8000255334034          
Tuning started
Tuning mutation strength - Best is: 0.06000000000000001           
Tuning mutation prob - Best is: 0.026500000000000003          
Tuning selection factor - Best is: 0.142          
Tuning genetic drift - Best is: 0.8000000000000003          
Finished tuning
Training gen 4866 - Best fitness is: -817.8000066973798          
Training gen 4867 - Best fitness is: -817.8000066973798          
Trainer finished - Max Fitness = -817.8000066973798
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-817.8000066973798, minWeight=-3.1272471373970974, maxWeight=3.866905365865421, middleWeights=
[-1.213, 0.96],    [-1.493, 1.174],    [-2.787, 1.194],    [-1.464, 1.327],    [-0.545, 0.548],    [-2.242, 1.127],    [-0.366, -0.224],    [-1.307, 0.711],    [-1.845, 1.866],    [-0.434, 0.366]

[1.12, 2.446, 0.844, 0.721, 2.086, 3.528, 1.887, 1.125, 1.792, 1.353, -0.007],    [2.118, 2.392, 0.549, 1.241, 3.532, 2.56, 1.411, 2.324, 1.386, 1.528, -0.352],    [2.545, 2.227, 2.61, 1.332, 1.972, 2.16, 2.281, 2.039, 0.695, 1.739, -0.222],    [2.225, 2.147, 1.677, 1.989, 1.611, 1.363, 1.084, 3.422, 0.991, 1.89, -0.258],    [3.188, 0.997, 2.778, 2.723, 1.468, 1.81, 1.873, 1.798, 2.609, 1.016, -0.299],    [1.451, 1.899, 0.932, 0.899, 1.588, 2.792, 0.896, 1.653, 1.316, 1.94, -0.007],    [1.273, 1.414, 1.269, 2.868, 2.919, 1.959, 0.627, 2.691, 2.807, 1.079, -0.068],    [1.064, 2.169, 1.939, 2.637, 3.447, 2.539, 2.037, 1.433, 1.272, 2.487, -0.057],    [1.261, 2.097, 2.776, 1.851, 2.564, 2.103, 1.342, 2.524, 1.539, 3.165, -0.433],    [2.952, 1.833, 1.707, 1.452, 2.186, 0.998, 1.808, 0.948, 2.953, 1.556, -0.629]

[2.375, 1.3, 1.899, 1.162, 2.408, 2.282, 1.769, 2.116, 1.28, 2.621, -0.017],    [2.53, 2.86, 2.142, 2.8, 0.32, 1.244, 0.94, 2.016, 1.506, 2.342, 0.743],    [1.521, 2.946, 1.519, 1.527, 1.425, 1.938, 0.105, 2.446, 1.336, 2.574, 0.115],    [0.747, 1.87, 0.96, 2.266, 1.916, 1.367, 2.677, 1.067, 1.363, 2.567, 0.003],    [1.292, 2.013, 0.501, 0.704, 2.555, 3.296, 1.372, 1.266, 0.363, 2.256, -0.32],    [2.374, 0.493, 0.919, 1.548, 0.535, 2.403, 1.35, 1.577, 1.524, 0.675, 1.029],    [1.457, 1.92, 1.81, 0.596, 2.238, 1.963, 1.753, 1.632, 1.808, 0.374, 0.049],    [3.265, 1.642, 1.443, 2.677, 2.626, 0.937, 0.847, 1.597, 1.461, 1.702, 0.228],    [1.708, 2.667, 2.144, 1.014, 2.885, 0.889, 1.702, 0.24, 1.6, 1.038, -0.014],    [1.908, 2.065, 2.068, 0.993, 2.456, 0.97, 1.667, 1.86, 2.604, 0.877, 0.08]

outputWeights =
[1.147, 1.451, 1.338, 2.619, 2.822, 1.367, 1.434, 1.013, 2.224, 1.142, 1.962],    
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-817.8000066973798, minWeight=-3.1272471373970974, maxWeight=3.866905365865421, layers=

[1.0] 

[0.0, 0.0, 0.0, 0.0, 0.003, 0.0, 0.0, 0.0, 0.021, 0.0] 

[0.037, 0.0, 0.0, 0.0, 0.0, 0.026, 0.0, 0.0, 0.0, 0.0] 

[0.129, 0.867, 0.22, 0.066, 0.0, 1.178, 0.153, 0.372, 0.072, 0.175] 

[6.4]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-817.8000066973798, minWeight=-3.1272471373970974, maxWeight=3.866905365865421, layers=

[12.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.743, 0.115, 0.003, 0.0, 1.029, 0.049, 0.228, 0.0, 0.08] 

[5.0]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-817.8000066973798, minWeight=-3.1272471373970974, maxWeight=3.866905365865421, layers=

[3.5] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.743, 0.115, 0.003, 0.0, 1.029, 0.049, 0.228, 0.0, 0.08] 

[5.0]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-817.8000066973798, minWeight=-3.1272471373970974, maxWeight=3.866905365865421, layers=

[4.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.743, 0.115, 0.003, 0.0, 1.029, 0.049, 0.228, 0.0, 0.08] 

[5.0]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-817.8000066973798, minWeight=-3.1272471373970974, maxWeight=3.866905365865421, layers=

[5.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.743, 0.115, 0.003, 0.0, 1.029, 0.049, 0.228, 0.0, 0.08] 

[5.0]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-817.8000066973798, minWeight=-3.1272471373970974, maxWeight=3.866905365865421, layers=

[3.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.743, 0.115, 0.003, 0.0, 1.029, 0.049, 0.228, 0.0, 0.08] 

[5.0]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-817.8000066973798, minWeight=-3.1272471373970974, maxWeight=3.866905365865421, layers=

[7.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.743, 0.115, 0.003, 0.0, 1.029, 0.049, 0.228, 0.0, 0.08] 

[5.0]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-817.8000066973798, minWeight=-3.1272471373970974, maxWeight=3.866905365865421, layers=

[8.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.743, 0.115, 0.003, 0.0, 1.029, 0.049, 0.228, 0.0, 0.08] 

[5.0]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-817.8000066973798, minWeight=-3.1272471373970974, maxWeight=3.866905365865421, layers=

[9.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.743, 0.115, 0.003, 0.0, 1.029, 0.049, 0.228, 0.0, 0.08] 

[5.0]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-817.8000066973798, minWeight=-3.1272471373970974, maxWeight=3.866905365865421, layers=

[10.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.743, 0.115, 0.003, 0.0, 1.029, 0.049, 0.228, 0.0, 0.08] 

[5.0]
(base) justinsasek@wireless-10-145-66-6 AITesting % 
(base) justinsasek@wireless-10-145-66-6 AITesting %  cd /Users/justinsasek/Code/Test/AITesting ; /usr/bin/env /Library/Java/JavaVirtualMachines/
jdk-11.0.16.jdk/Contents/Home/bin/java -cp /Users/justinsasek/Code/Test/AITesting/bin Client 
Trainer started
Tuning started
Tuning mutation strength - Best is: 0.09750000000000004           
Tuning mutation prob - Best is: 0.09510000000000002           
Tuning selection factor - Best is: 0.20200000000000004           
Tuning genetic drift - Best is: 0.5          
Finished tuning
Training gen 4812 - Best fitness is: -16.939244480215255          
Tuning started
Tuning mutation strength - Best is: 0.05500000000000001          
Tuning mutation prob - Best is: 0.04610000000000001          
Tuning selection factor - Best is: 0.08199999999999999          
Tuning genetic drift - Best is: 0.5          
Finished tuning
Training gen 4811 - Best fitness is: -16.869911151162707          
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.0118          
Tuning selection factor - Best is: 0.10599999999999998           
Tuning genetic drift - Best is: 0.5          
Finished tuning
Training gen 4793 - Best fitness is: -16.86818986008427           
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.002          
Tuning selection factor - Best is: 0.01          
Tuning genetic drift - Best is: 0.5          
Finished tuning
Training gen 9079 - Best fitness is: -16.86818986008427          
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.002          
Tuning selection factor - Best is: 0.01          
Tuning genetic drift - Best is: 0.5          
Finished tuning
Training gen 13362 - Best fitness is: -16.86818986008427          
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.002          
Tuning selection factor - Best is: 0.01          
Tuning genetic drift - Best is: 0.5          
Finished tuning
Training gen 17640 - Best fitness is: -16.86818986008427          
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.002          
Tuning selection factor - Best is: 0.01          
Tuning genetic drift - Best is: 0.5          
Finished tuning
Training gen 21872 - Best fitness is: -16.86818986008427          
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.002          
Tuning selection factor - Best is: 0.057999999999999996          
Tuning genetic drift - Best is: 0.5          
Finished tuning
Training gen 4695 - Best fitness is: -16.86818439212468          
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.002          
Tuning selection factor - Best is: 0.01          
Tuning genetic drift - Best is: 0.5          
Finished tuning
Training gen 8888 - Best fitness is: -16.86818439212468          
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.002          
Tuning selection factor - Best is: 0.01          
Tuning genetic drift - Best is: 0.5          
Finished tuning
(base) justinsasek@wireless-10-145-66-6 AITesting %  cd /Users/justinsasek/Code/Test/AITesting ; /usr/bin/env /Library/Java/JavaVirtualMachines/
jdk-11.0.16.jdk/Contents/Home/bin/java -cp /Users/justinsasek/Code/Test/AITesting/bin Client 
Trainer started
Tuning started
Tuning mutation strength - Best is: 0.09750000000000004          
Tuning mutation prob - Best is: 0.09510000000000002
Tuning selection factor - Best is: 0.23800000000000007
Tuning genetic drift - Best is: 0.7200000000000002
Finished tuning
Training gen 2900 - Best fitness is: -16.965013247133534          

Trainer finished - Max Fitness = -16.965013247133534
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.965013247133534, minWeight=-1.8544115569386759, maxWeight=3.606216045167845, middleWeights=
[-0.022, 1.493],    [1.18, 0.838],    [0.419, 1.663],    [-0.417, 0.598],    [0.096, -1.336],    [0.445, -0.978],    [-0.45, 0.428],    [-1.429, -1.244],    [0.457, 0.375],    [0.455, -1.403]

[0.592, 0.953, 2.149, 1.444, 1.913, 2.014, 1.844, 2.399, 1.63, 1.775, 2.074],    [2.25, 2.331, 0.921, 1.076, 1.368, 2.623, 1.829, 1.494, 1.232, 1.6, 2.017],    [2.476, 1.027, 0.696, 2.385, 1.53, 1.851, 1.671, 2.01, 1.106, 1.639, 1.127],    [1.874, 1.324, 1.966, 2.867, 2.791, 2.412, 1.94, 2.121, 0.992, 1.899, 1.679],    [1.132, 0.894, 0.901, 1.362, 3.145, 1.447, 2.203, 2.182, 2.028, 1.917, 2.146],    [1.081, 0.853, 0.942, 0.951, 2.131, 2.069, 2.56, 2.187, 1.686, 2.399, 2.25],    [1.363, 0.903, 2.164, 2.451, 2.227, 3.052, 2.431, 2.934, 1.296, 2.14, 2.277],    [2.055, 1.614, 0.414, 1.277, 2.562, 2.085, 2.265, 2.168, 1.813, 1.149, 1.514],    [0.943, 1.731, 2.238, 2.018, 1.583, 1.498, 2.314, 1.831, 2.959, 3.09, 2.397],    [2.725, 0.985, 0.666, 2.103, 2.141, 2.001, 2.885, 2.785, 2.468, 2.676, 3.018]

[2.682, 2.269, 0.99, 2.025, 1.873, 2.721, 2.689, 1.994, 2.481, 2.532, 1.396],    [1.268, 1.489, 1.195, 3.286, 2.292, 1.755, 1.807, 1.879, 2.685, 1.946, 2.8],    [2.232, 0.818, 1.366, 2.091, 2.013, 0.957, 1.879, 2.362, 3.073, 2.314, 1.119],    [2.125, 1.209, 1.122, 0.988, 0.806, 0.741, 2.011, 2.267, 1.877, 2.065, 2.555],    [2.955, 2.363, 1.543, 1.918, 1.503, 1.943, 1.988, 2.438, 1.006, 3.015, 1.59],    [1.431, 2.567, 0.661, 1.753, 2.286, 1.994, 2.478, 1.223, 2.307, 0.986, 2.0],    [2.546, 1.111, 1.588, 1.091, 1.061, 2.469, 1.22, 2.5, 2.25, 1.218, 1.593],    [1.073, 1.179, 2.576, 2.27, 2.33, 0.674, 2.212, 2.495, 1.692, 1.228, 1.936],    [2.477, 2.033, 0.804, 2.106, 3.092, 2.862, 2.334, 1.678, 2.41, 1.752, 2.127],    [1.232, 2.688, 1.733, 2.149, 1.652, 1.498, 0.837, 1.537, 1.948, 0.742, 2.927]

outputWeights =
[1.28, 1.403, 1.634, 2.457, 1.997, 1.186, 1.033, 1.989, 1.329, 2.042, 1.126],    
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.965013247133534, minWeight=-1.8544115569386759, maxWeight=3.606216045167845, layers=

[1.0] 

[1.471, 2.018, 2.082, 0.181, 0.0, 0.0, 0.0, 0.0, 0.832, 0.0] 

[10.963, 13.168, 9.646, 12.547, 9.426, 9.099, 12.132, 10.398, 14.767, 12.839] 

[260.545, 232.731, 225.901, 181.532, 238.926, 209.06, 195.276, 204.193, 249.243, 189.142] 

[3526.503]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.965013247133534, minWeight=-1.8544115569386759, maxWeight=3.606216045167845, layers=

[12.0] 

[1.234, 14.999, 6.69, 0.0, 0.0, 4.368, 0.0, 0.0, 5.861, 4.061] 

[57.039, 71.083, 45.472, 61.067, 48.974, 51.341, 61.59, 55.433, 80.934, 59.691] 

[1343.84, 1187.245, 1157.618, 923.287, 1217.716, 1083.522, 1011.917, 1036.262, 1287.742, 970.838] 

[18063.11]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.965013247133534, minWeight=-1.8544115569386759, maxWeight=3.606216045167845, layers=

[3.5] 

[1.417, 4.968, 3.13, 0.0, 0.0, 0.581, 0.0, 0.0, 1.975, 0.191] 

[19.104, 23.929, 15.493, 20.789, 16.224, 15.958, 20.207, 18.755, 26.643, 20.41] 

[447.682, 397.683, 387.275, 310.219, 407.983, 360.958, 337.076, 347.961, 428.735, 325.806] 

[6044.994]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.965013247133534, minWeight=-1.8544115569386759, maxWeight=3.606216045167845, layers=

[4.0] 

[1.407, 5.558, 3.339, 0.0, 0.0, 0.804, 0.0, 0.0, 2.204, 0.418] 

[21.336, 26.703, 17.256, 23.159, 18.151, 18.039, 22.641, 20.913, 29.837, 22.72] 

[500.397, 444.128, 432.589, 346.282, 455.614, 403.462, 376.773, 388.45, 479.264, 363.749] 

[6751.942]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.965013247133534, minWeight=-1.8544115569386759, maxWeight=3.606216045167845, layers=

[5.0] 

[1.385, 6.738, 3.758, 0.0, 0.0, 1.249, 0.0, 0.0, 2.661, 0.874] 

[25.798, 32.25, 20.783, 27.897, 22.004, 22.202, 27.51, 25.228, 36.224, 27.342] 

[605.827, 537.017, 523.218, 418.408, 550.877, 488.47, 456.166, 469.426, 580.324, 439.635] 

[8165.838]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.965013247133534, minWeight=-1.8544115569386759, maxWeight=3.606216045167845, layers=

[3.0] 

[1.428, 4.378, 2.92, 0.0, 0.0, 0.358, 0.0, 0.0, 1.747, 0.0] 

[16.938, 21.214, 13.79, 18.49, 14.368, 13.965, 17.851, 16.64, 23.564, 18.198] 

[396.681, 352.749, 343.438, 275.299, 361.863, 319.809, 298.657, 308.747, 379.858, 289.034] 

[5360.645]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.965013247133534, minWeight=-1.8544115569386759, maxWeight=3.606216045167845, layers=

[7.0] 

[1.342, 9.098, 4.596, 0.0, 0.0, 2.14, 0.0, 0.0, 3.575, 1.784] 

[34.724, 43.345, 27.837, 37.374, 29.709, 30.528, 37.247, 33.858, 48.998, 36.584] 

[816.688, 722.797, 704.475, 562.659, 741.402, 658.484, 614.952, 631.379, 782.443, 591.407] 

[10993.63]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.965013247133534, minWeight=-1.8544115569386759, maxWeight=3.606216045167845, layers=

[8.0] 

[1.32, 10.278, 5.015, 0.0, 0.0, 2.586, 0.0, 0.0, 4.032, 2.24] 

[39.187, 48.893, 31.364, 42.113, 33.562, 34.69, 42.115, 38.173, 55.385, 41.206] 

[922.118, 815.686, 795.104, 634.785, 836.665, 743.492, 694.345, 712.356, 883.503, 667.293] 

[12407.526]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.965013247133534, minWeight=-1.8544115569386759, maxWeight=3.606216045167845, layers=

[9.0] 

[1.299, 11.458, 5.433, 0.0, 0.0, 3.031, 0.0, 0.0, 4.49, 2.695] 

[43.65, 54.44, 34.891, 46.852, 37.415, 38.853, 46.984, 42.488, 61.772, 45.827] 

[1027.549, 908.576, 885.732, 706.91, 931.928, 828.499, 773.738, 793.332, 984.563, 743.179] 

[13821.422]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-16.965013247133534, minWeight=-1.8544115569386759, maxWeight=3.606216045167845, layers=

[10.0] 

[1.277, 12.638, 5.852, 0.0, 0.0, 3.477, 0.0, 0.0, 4.947, 3.151] 

[48.113, 59.988, 38.418, 51.59, 41.268, 43.016, 51.853, 46.803, 68.159, 50.449] 

[1132.979, 1001.466, 976.361, 779.036, 1027.19, 913.507, 853.131, 874.309, 1085.622, 819.066] 

[15235.318]
(base) justinsasek@wireless-10-145-66-6 AITesting % 
(base) justinsasek@wireless-10-145-66-6 AITesting % git commit -m "minimized printing"
On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   bin/NeuralNetwork.class
        modified:   bin/Trainer.class
        modified:   src/NeuralNetwork.java
        modified:   src/Trainer.java

no changes added to commit (use "git add" and/or "git commit -a")
(base) justinsasek@wireless-10-145-66-6 AITesting % git commit -a -m "minimized printing"
[main 963db6f] minimized printing
 4 files changed, 9 insertions(+), 13 deletions(-)
(base) justinsasek@wireless-10-145-66-6 AITesting % git push
Enumerating objects: 15, done.
Counting objects: 100% (15/15), done.
Delta compression using up to 8 threads
Compressing objects: 100% (8/8), done.
Writing objects: 100% (8/8), 2.56 KiB | 2.56 MiB/s, done.
Total 8 (delta 6), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (6/6), completed with 6 local objects.
To https://github.com/JustinSasek/GeneticAITesting.git
   1c47ffa..963db6f  main -> main
(base) justinsasek@wireless-10-145-66-6 AITesting %  cd /Users/justinsasek/Code/Test/AITesting ; /usr/bin/env /Library/Java/JavaVirtualMachines/
jdk-11.0.16.jdk/Contents/Home/bin/java -cp /Users/justinsasek/Code/Test/AITesting/bin Client 
Trainer started
Tuning started
Tuning mutation strength - Best is: 0.09750000000000004          
Tuning mutation prob - Best is: 0.09510000000000002
(base) justinsasek@wireless-10-145-66-6 AITesting %  cd /Users/justinsasek/Code/Test/AITesting ; /usr/bin/env /Library/Java/JavaVirtualMachines/
jdk-11.0.16.jdk/Contents/Home/bin/java -cp /Users/justinsasek/Code/Test/AITesting/bin Client 
Trainer started
Tuning started
Tuning mutation strength - Best is: 1.1375          
Tuning mutation prob - Best is: 0.019000000000000003
Tuning selection factor - Best is: 0.142
Tuning genetic drift - Best is: 0.5
Finished tuning
(base) justinsasek@wireless-10-145-66-6 AITesting %  cd /Users/justinsasek/Code/Test/AITesting ; /usr/bin/env /Library/Java/JavaVirtualMachines/
jdk-11.0.16.jdk/Contents/Home/bin/java -cp /Users/justinsasek/Code/Test/AITesting/bin Client 
Trainer started
Tuning started
Tuning mutation strength - Best is: 1.5          
Tuning mutation prob - Best is: 0.09100000000000005
Tuning selection factor - Best is: 0.23800000000000007
Tuning genetic drift - Best is: 0.8400000000000003
Finished tuning
Training gen 5400 - Best fitness is: -5.91711885300753            
Tuning started
Tuning mutation strength - Best is: 1.5          
Tuning mutation prob - Best is: 0.06400000000000003
Tuning selection factor - Best is: 0.23800000000000007
Tuning genetic drift - Best is: 0.8800000000000003
Finished tuning
Training gen 5500 - Best fitness is: -3.744617491761172           
Tuning started
Tuning mutation strength - Best is: 1.5          
Tuning mutation prob - Best is: 0.028000000000000004
Tuning selection factor - Best is: 0.20200000000000004
Tuning genetic drift - Best is: 0.5
Finished tuning
Training gen 4600 - Best fitness is: -3.3143219439806986          
Tuning started
Tuning mutation strength - Best is: 1.5          
Tuning mutation prob - Best is: 0.04150000000000001
Tuning selection factor - Best is: 0.22600000000000006
Tuning genetic drift - Best is: 0.8000000000000003
Finished tuning
Training gen 5300 - Best fitness is: -3.1604154771051847          
Tuning started
Tuning mutation strength - Best is: 0.2675          
Tuning mutation prob - Best is: 0.07300000000000004
Tuning selection factor - Best is: 0.19000000000000003
Tuning genetic drift - Best is: 0.7000000000000002
Finished tuning
Training gen 5000 - Best fitness is: -3.1324863152851647          
Tuning started
Tuning mutation strength - Best is: 0.2675          
Tuning mutation prob - Best is: 0.0325
Tuning selection factor - Best is: 0.057999999999999996
Tuning genetic drift - Best is: 0.56
Finished tuning
Training gen 4700 - Best fitness is: -3.1257694294923186          
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.05500000000000002
Tuning selection factor - Best is: 0.057999999999999996
Tuning genetic drift - Best is: 0.5
Finished tuning
Training gen 4600 - Best fitness is: -3.091720714253065           
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.05500000000000002
Tuning selection factor - Best is: 0.034
Tuning genetic drift - Best is: 0.7200000000000002
Finished tuning
Training gen 5100 - Best fitness is: -3.0905277832676634          
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.01
Tuning selection factor - Best is: 0.01
Tuning genetic drift - Best is: 0.5
Finished tuning
Training gen 4500 - Best fitness is: -3.0904507960875507          
Tuning started
Tuning mutation strength - Best is: 1.5          
Tuning mutation prob - Best is: 0.09100000000000005
Tuning selection factor - Best is: 0.06999999999999999
Tuning genetic drift - Best is: 0.5
Finished tuning
Training gen 4500 - Best fitness is: -2.5584589327339695          
Tuning started
Tuning mutation strength - Best is: 0.92          
Tuning mutation prob - Best is: 0.01
Tuning selection factor - Best is: 0.11799999999999998
Tuning genetic drift - Best is: 0.6800000000000002
Finished tuning
Training gen 5000 - Best fitness is: -2.5506187615359             
Tuning started
Tuning mutation strength - Best is: 0.775          
Tuning mutation prob - Best is: 0.07300000000000004
Tuning selection factor - Best is: 0.142
Tuning genetic drift - Best is: 0.5
Finished tuning
Training gen 4500 - Best fitness is: -2.531239180242911           
Tuning started
Tuning mutation strength - Best is: 0.63          
Tuning mutation prob - Best is: 0.06850000000000003
Tuning selection factor - Best is: 0.046
Tuning genetic drift - Best is: 0.5
Finished tuning
Training gen 4500 - Best fitness is: -2.4682585270545188          
Tuning started
Tuning mutation strength - Best is: 0.2675          
Tuning mutation prob - Best is: 0.04600000000000001
Tuning selection factor - Best is: 0.10599999999999998
Tuning genetic drift - Best is: 0.8800000000000003
Finished tuning
Training gen 5500 - Best fitness is: -2.467092822345993           
Tuning started
Tuning mutation strength - Best is: 0.775          
Tuning mutation prob - Best is: 0.01
Tuning selection factor - Best is: 0.022
Tuning genetic drift - Best is: 0.5
Finished tuning
Training gen 4600 - Best fitness is: -2.4616165085049047          
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.0325
Tuning selection factor - Best is: 0.22600000000000006
Tuning genetic drift - Best is: 0.8800000000000003
Finished tuning
Training gen 5500 - Best fitness is: -2.2736328907611885          
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.06850000000000003
Tuning selection factor - Best is: 0.20200000000000004
Tuning genetic drift - Best is: 0.6400000000000001
Finished tuning
Training gen 4900 - Best fitness is: -2.0597289404507007          
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.09550000000000006
Tuning selection factor - Best is: 0.09399999999999999
Tuning genetic drift - Best is: 0.5
Finished tuning
Training gen 4500 - Best fitness is: -2.0462310442837404          
Tuning started
Tuning mutation strength - Best is: 0.8475          
Tuning mutation prob - Best is: 0.01
Tuning selection factor - Best is: 0.01
Tuning genetic drift - Best is: 0.5
Finished tuning
Training gen 4600 - Best fitness is: -2.0461942725334934          
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.08200000000000005
Tuning selection factor - Best is: 0.22600000000000006
Tuning genetic drift - Best is: 0.7400000000000002
Finished tuning
Training gen 5100 - Best fitness is: -2.038785160012986           
Tuning started
Tuning mutation strength - Best is: 0.8475          
Tuning mutation prob - Best is: 0.01
Tuning selection factor - Best is: 0.01
Tuning genetic drift - Best is: 0.5
Finished tuning
Training gen 4600 - Best fitness is: -2.038738514235484           
Tuning started
Tuning mutation strength - Best is: 0.41250000000000003          
Tuning mutation prob - Best is: 0.01
Tuning selection factor - Best is: 0.22600000000000006
Tuning genetic drift - Best is: 0.5800000000000001
Finished tuning
Training gen 4800 - Best fitness is: -2.0387364277918048          
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.0325
Tuning selection factor - Best is: 0.01
Tuning genetic drift - Best is: 0.5
Finished tuning
Training gen 4600 - Best fitness is: -2.036081476061208           
Tuning started
Tuning mutation strength - Best is: 0.05          
Tuning mutation prob - Best is: 0.0325
Tuning selection factor - Best is: 0.21400000000000005
Tuning genetic drift - Best is: 0.5800000000000001
Finished tuning
Training gen 4000 - Best fitness is: -2.0314779567471617          

Trainer finished - Max Fitness = -2.0314779567471617
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-2.0314779567471617, minWeight=-36.01637889034226, maxWeight=32.85592213262702, middleWeights=
[-8.288, 0.11],    [-1.048, 1.126],    [-2.477, -2.822],    [-6.469, 3.886],    [0.202, -2.017],    [-10.712, 6.259],    [-13.458, -14.543],    [-12.646, 2.015],    [-13.817, 12.705],    [0.028, -0.098]

[7.177, 1.94, -3.65, -5.597, -6.255, -0.881, -3.185, 16.932, -3.227, 0.785, 0.051],    [-4.431, -18.69, -8.996, 4.294, -3.598, -8.22, 7.796, -3.66, -16.638, 1.861, -0.121],    [9.876, 7.138, 3.479, 16.236, 0.347, 11.737, -20.904, 6.332, -13.255, 5.049, -3.971],    [-10.035, -0.14, 0.291, -3.87, -10.686, -9.982, 1.266, 9.598, 8.53, 8.19, -16.093],    [-7.607, -0.864, -0.209, 3.717, 0.382, -7.188, 7.744, 9.602, -3.122, -4.29, 0.06],    [-1.173, -3.774, -6.145, 2.722, 6.682, 5.872, 9.423, -5.254, 0.579, 5.04, -6.129],    [20.074, 15.184, 16.366, -2.755, 1.35, 11.888, 12.759, 4.836, 5.079, -2.864, -6.302],    [12.928, 1.698, 4.481, -3.517, -8.084, -0.592, 9.892, -8.334, 11.485, -3.891, -0.464],    [-9.692, 0.809, 3.09, 4.386, -8.2, 6.093, 19.003, 15.576, -8.968, -3.15, 0.113],    [10.466, 14.379, 6.023, 5.543, 0.34, -3.518, 17.634, 20.069, -2.786, -8.279, -8.533]

[4.569, -16.292, -4.853, 10.852, 8.552, -14.781, 4.512, 17.487, 7.158, 3.334, -0.777],    [-0.277, 2.2, -5.339, -20.538, 18.008, -0.694, -0.729, 8.726, -3.31, -0.071, 0.245],    [5.821, 4.427, 17.848, -6.489, 9.736, 6.151, -3.283, 8.917, -3.999, 15.571, -1.014],    [-5.373, -10.003, -11.348, 0.932, 4.379, 1.882, 9.071, 4.373, 1.525, 26.968, 0.239],    [-14.79, -1.389, -13.638, 18.642, 6.153, -2.374, -6.623, -14.487, -12.02, -2.089, -3.079],    [-10.12, -1.351, 2.438, -1.928, -7.515, 5.227, -3.82, 5.104, 4.882, 0.959, -5.426],    [-8.803, 1.695, 4.831, -6.751, 0.533, 0.431, 22.209, -2.517, 10.234, -2.116, -7.731],    [2.721, 7.563, 9.265, -7.802, 0.594, 18.861, 7.262, -9.773, 6.885, 0.65, -1.523],    [-0.462, -1.565, 15.63, 10.886, 10.579, -0.429, -1.562, 5.968, 5.302, -2.796, -4.546],    [13.055, -30.271, -5.796, 1.297, 24.873, -5.559, 3.156, -3.472, -14.445, -8.266, 0.162]

outputWeights =
[2.113, 2.412, 2.285, 1.178, 1.849, 1.833, 1.316, 2.044, 1.245, 1.499, 2.585],    
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-2.0314779567471617, minWeight=-36.01637889034226, maxWeight=32.85592213262702, layers=

[1.0] 

[0.0, 0.078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.201, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.176, 0.0] 

[1.401, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.235, 0.0, 0.249] 

[6.4]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-2.0314779567471617, minWeight=-36.01637889034226, maxWeight=32.85592213262702, layers=

[12.0] 

[0.0, 0.0, 0.0, 0.0, 0.401, 0.0, 0.0, 0.0, 0.0, 0.238] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.245, 0.0, 0.239, 0.0, 0.0, 0.0, 0.0, 0.0, 0.162] 

[3.7]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-2.0314779567471617, minWeight=-36.01637889034226, maxWeight=32.85592213262702, layers=

[3.5] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.051, 0.0, 0.0, 0.0, 0.06, 0.0, 0.0, 0.0, 0.113, 0.0] 

[0.777, 0.94, 0.0, 0.402, 0.0, 0.0, 0.0, 0.0, 0.0, 0.686] 

[7.998]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-2.0314779567471617, minWeight=-36.01637889034226, maxWeight=32.85592213262702, layers=

[4.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.014] 

[0.062, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.069, 0.0] 

[0.0, 0.0, 0.0, 0.013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[2.6]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-2.0314779567471617, minWeight=-36.01637889034226, maxWeight=32.85592213262702, layers=

[5.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.042] 

[0.084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.254] 

[5.0]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-2.0314779567471617, minWeight=-36.01637889034226, maxWeight=32.85592213262702, layers=

[3.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.051, 0.0, 0.0, 0.0, 0.06, 0.0, 0.0, 0.0, 0.113, 0.0] 

[0.778, 0.94, 0.0, 0.403, 0.0, 0.0, 0.0, 0.0, 0.0, 0.687] 

[8.0]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-2.0314779567471617, minWeight=-36.01637889034226, maxWeight=32.85592213262702, layers=

[7.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.098] 

[0.128, 0.061, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[3.417]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-2.0314779567471617, minWeight=-36.01637889034226, maxWeight=32.85592213262702, layers=

[8.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.126] 

[0.15, 0.114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.453, 0.359, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[4.5]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-2.0314779567471617, minWeight=-36.01637889034226, maxWeight=32.85592213262702, layers=

[9.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.154] 

[0.172, 0.166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.562, 0.719, 0.0, 0.0, 0.0, 0.0, 0.198, 0.0, 0.0] 

[5.987]
NeuralNetwork [inputSize=1, outputSize=1, midHeight=3, width=10, fitness=-2.0314779567471617, minWeight=-36.01637889034226, maxWeight=32.85592213262702, layers=

[10.0] 

[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.182] 

[0.194, 0.218, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] 

[0.0, 0.671, 1.078, 0.0, 0.0, 0.0, 0.0, 0.652, 0.0, 0.0] 

[8.0]
(base) justinsasek@wireless-10-145-66-6 AITesting % 
(base) justinsasek@wireless-10-145-66-6 AITesting % 